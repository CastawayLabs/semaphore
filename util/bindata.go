// Code generated by go-bindata.
// sources:
// db/migrations/v0.0.0.sql
// db/migrations/v0.1.0.sql
// db/migrations/v1.0.0.sql
// db/migrations/v1.1.0.sql
// db/migrations/v1.2.0.sql
// db/migrations/v1.3.0.sql
// db/migrations/v1.4.0.sql
// db/migrations/v1.5.0.sql
// db/migrations/v1.6.0.sql
// db/migrations/v1.7.0.sql
// db/migrations/v1.8.0.sql
// db/migrations/v1.9.0.sql
// db/migrations/v2.2.1.sql
// db/migrations/v2.3.0.sql
// db/migrations/v2.3.1.sql
// db/migrations/v2.3.2.sql
// db/migrations/v2.4.0.sql
// db/migrations/v2.5.0.sql
// public/css/.gitignore
// public/css/login.less
// public/css/octocat.less
// public/css/semaphore.less
// public/html/.gitignore
// public/html/abstract.pug
// public/html/admin.pug
// public/html/dashboard.pug
// public/html/index.pug
// public/html/tasks.pug
// public/html/auth/login.pug
// public/html/auth/logout.pug
// public/html/projects/add.pug
// public/html/projects/container.pug
// public/html/projects/createTaskModal.pug
// public/html/projects/dashboard.pug
// public/html/projects/edit.pug
// public/html/projects/schedule.pug
// public/html/projects/taskModal.pug
// public/html/projects/environment/add.pug
// public/html/projects/environment/list.pug
// public/html/projects/inventory/add.pug
// public/html/projects/inventory/edit.pug
// public/html/projects/inventory/list.pug
// public/html/projects/keys/add.pug
// public/html/projects/keys/list.pug
// public/html/projects/repositories/add.pug
// public/html/projects/repositories/list.pug
// public/html/projects/templates/add.pug
// public/html/projects/templates/list.pug
// public/html/projects/users/add.pug
// public/html/projects/users/list.pug
// public/html/users/add.pug
// public/html/users/list.pug
// public/html/users/user.pug
// public/img/icon.png
// public/img/logo.png
// public/img/screenshot.png
// public/js/app.js
// public/js/controllers/admin.js
// public/js/controllers/dashboard.js
// public/js/controllers/login.js
// public/js/controllers/tasks.js
// public/js/controllers/user.js
// public/js/controllers/users.js
// public/js/controllers/projects/dashboard.js
// public/js/controllers/projects/edit.js
// public/js/controllers/projects/environment.js
// public/js/controllers/projects/inventory.js
// public/js/controllers/projects/keys.js
// public/js/controllers/projects/repositories.js
// public/js/controllers/projects/schedule.js
// public/js/controllers/projects/taskRunner.js
// public/js/controllers/projects/templates.js
// public/js/controllers/projects/users.js
// public/js/factories/host.js
// public/js/factories/hostgroup.js
// public/js/factories/identity.js
// public/js/factories/job.js
// public/js/factories/playbook.js
// public/js/factories/project.js
// public/js/factories/task.js
// public/js/factories/user.js
// public/js/routes/auth.js
// public/js/routes/project.js
// public/js/routes/router.js
// public/js/services/hostgroups.js
// public/js/services/identities.js
// public/js/services/jobs.js
// public/js/services/playbooks.js
// public/js/services/tasks.js
// public/js/services/user.js
// public/js/services/users.js
// DO NOT EDIT!

package util

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// dbMigrationsV000Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV000Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v0.0.0.sql"
	name := "db/migrations/v0.0.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV010Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV010Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v0.1.0.sql"
	name := "db/migrations/v0.1.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV100Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV100Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.0.0.sql"
	name := "db/migrations/v1.0.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV110Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV110Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.1.0.sql"
	name := "db/migrations/v1.1.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV120Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV120Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.2.0.sql"
	name := "db/migrations/v1.2.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV130Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV130Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.3.0.sql"
	name := "db/migrations/v1.3.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV140Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV140Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.4.0.sql"
	name := "db/migrations/v1.4.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV150Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV150Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.5.0.sql"
	name := "db/migrations/v1.5.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV160Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV160Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.6.0.sql"
	name := "db/migrations/v1.6.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV170Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV170Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.7.0.sql"
	name := "db/migrations/v1.7.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV180Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV180Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.8.0.sql"
	name := "db/migrations/v1.8.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV190Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV190Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v1.9.0.sql"
	name := "db/migrations/v1.9.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV221Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV221Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v2.2.1.sql"
	name := "db/migrations/v2.2.1.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV230Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV230Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v2.3.0.sql"
	name := "db/migrations/v2.3.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV231Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV231Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v2.3.1.sql"
	name := "db/migrations/v2.3.1.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV232Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV232Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v2.3.2.sql"
	name := "db/migrations/v2.3.2.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV240Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV240Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v2.4.0.sql"
	name := "db/migrations/v2.4.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dbMigrationsV250Sql reads file data from disk. It returns an error on failure.
func dbMigrationsV250Sql() (*asset, error) {
	path := "/home/white/git/semaphore/db/migrations/v2.5.0.sql"
	name := "db/migrations/v2.5.0.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssGitignore reads file data from disk. It returns an error on failure.
func publicCssGitignore() (*asset, error) {
	path := "/home/white/git/semaphore/public/css/.gitignore"
	name := "public/css/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssLoginLess reads file data from disk. It returns an error on failure.
func publicCssLoginLess() (*asset, error) {
	path := "/home/white/git/semaphore/public/css/login.less"
	name := "public/css/login.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssOctocatLess reads file data from disk. It returns an error on failure.
func publicCssOctocatLess() (*asset, error) {
	path := "/home/white/git/semaphore/public/css/octocat.less"
	name := "public/css/octocat.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssSemaphoreLess reads file data from disk. It returns an error on failure.
func publicCssSemaphoreLess() (*asset, error) {
	path := "/home/white/git/semaphore/public/css/semaphore.less"
	name := "public/css/semaphore.less"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlGitignore reads file data from disk. It returns an error on failure.
func publicHtmlGitignore() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/.gitignore"
	name := "public/html/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAbstractPug reads file data from disk. It returns an error on failure.
func publicHtmlAbstractPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/abstract.pug"
	name := "public/html/abstract.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAdminPug reads file data from disk. It returns an error on failure.
func publicHtmlAdminPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/admin.pug"
	name := "public/html/admin.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlDashboardPug reads file data from disk. It returns an error on failure.
func publicHtmlDashboardPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/dashboard.pug"
	name := "public/html/dashboard.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlIndexPug reads file data from disk. It returns an error on failure.
func publicHtmlIndexPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/index.pug"
	name := "public/html/index.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlTasksPug reads file data from disk. It returns an error on failure.
func publicHtmlTasksPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/tasks.pug"
	name := "public/html/tasks.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAuthLoginPug reads file data from disk. It returns an error on failure.
func publicHtmlAuthLoginPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/auth/login.pug"
	name := "public/html/auth/login.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlAuthLogoutPug reads file data from disk. It returns an error on failure.
func publicHtmlAuthLogoutPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/auth/logout.pug"
	name := "public/html/auth/logout.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/add.pug"
	name := "public/html/projects/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsContainerPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsContainerPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/container.pug"
	name := "public/html/projects/container.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsCreatetaskmodalPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsCreatetaskmodalPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/createTaskModal.pug"
	name := "public/html/projects/createTaskModal.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsDashboardPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsDashboardPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/dashboard.pug"
	name := "public/html/projects/dashboard.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEditPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEditPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/edit.pug"
	name := "public/html/projects/edit.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsSchedulePug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsSchedulePug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/schedule.pug"
	name := "public/html/projects/schedule.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTaskmodalPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTaskmodalPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/taskModal.pug"
	name := "public/html/projects/taskModal.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEnvironmentAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEnvironmentAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/environment/add.pug"
	name := "public/html/projects/environment/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsEnvironmentListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsEnvironmentListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/environment/list.pug"
	name := "public/html/projects/environment/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/inventory/add.pug"
	name := "public/html/projects/inventory/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryEditPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryEditPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/inventory/edit.pug"
	name := "public/html/projects/inventory/edit.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsInventoryListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsInventoryListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/inventory/list.pug"
	name := "public/html/projects/inventory/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsKeysAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsKeysAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/keys/add.pug"
	name := "public/html/projects/keys/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsKeysListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsKeysListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/keys/list.pug"
	name := "public/html/projects/keys/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsRepositoriesAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsRepositoriesAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/repositories/add.pug"
	name := "public/html/projects/repositories/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsRepositoriesListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsRepositoriesListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/repositories/list.pug"
	name := "public/html/projects/repositories/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTemplatesAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTemplatesAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/templates/add.pug"
	name := "public/html/projects/templates/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsTemplatesListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsTemplatesListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/templates/list.pug"
	name := "public/html/projects/templates/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsUsersAddPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsUsersAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/users/add.pug"
	name := "public/html/projects/users/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlProjectsUsersListPug reads file data from disk. It returns an error on failure.
func publicHtmlProjectsUsersListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/projects/users/list.pug"
	name := "public/html/projects/users/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersAddPug reads file data from disk. It returns an error on failure.
func publicHtmlUsersAddPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/users/add.pug"
	name := "public/html/users/add.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersListPug reads file data from disk. It returns an error on failure.
func publicHtmlUsersListPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/users/list.pug"
	name := "public/html/users/list.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicHtmlUsersUserPug reads file data from disk. It returns an error on failure.
func publicHtmlUsersUserPug() (*asset, error) {
	path := "/home/white/git/semaphore/public/html/users/user.pug"
	name := "public/html/users/user.pug"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicImgIconPng reads file data from disk. It returns an error on failure.
func publicImgIconPng() (*asset, error) {
	path := "/home/white/git/semaphore/public/img/icon.png"
	name := "public/img/icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicImgLogoPng reads file data from disk. It returns an error on failure.
func publicImgLogoPng() (*asset, error) {
	path := "/home/white/git/semaphore/public/img/logo.png"
	name := "public/img/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicImgScreenshotPng reads file data from disk. It returns an error on failure.
func publicImgScreenshotPng() (*asset, error) {
	path := "/home/white/git/semaphore/public/img/screenshot.png"
	name := "public/img/screenshot.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsAppJs reads file data from disk. It returns an error on failure.
func publicJsAppJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/app.js"
	name := "public/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersAdminJs reads file data from disk. It returns an error on failure.
func publicJsControllersAdminJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/admin.js"
	name := "public/js/controllers/admin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersDashboardJs reads file data from disk. It returns an error on failure.
func publicJsControllersDashboardJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/dashboard.js"
	name := "public/js/controllers/dashboard.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersLoginJs reads file data from disk. It returns an error on failure.
func publicJsControllersLoginJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/login.js"
	name := "public/js/controllers/login.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersTasksJs reads file data from disk. It returns an error on failure.
func publicJsControllersTasksJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/tasks.js"
	name := "public/js/controllers/tasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersUserJs reads file data from disk. It returns an error on failure.
func publicJsControllersUserJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/user.js"
	name := "public/js/controllers/user.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersUsersJs reads file data from disk. It returns an error on failure.
func publicJsControllersUsersJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/users.js"
	name := "public/js/controllers/users.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsDashboardJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsDashboardJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/dashboard.js"
	name := "public/js/controllers/projects/dashboard.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsEditJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsEditJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/edit.js"
	name := "public/js/controllers/projects/edit.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsEnvironmentJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsEnvironmentJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/environment.js"
	name := "public/js/controllers/projects/environment.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsInventoryJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsInventoryJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/inventory.js"
	name := "public/js/controllers/projects/inventory.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsKeysJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsKeysJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/keys.js"
	name := "public/js/controllers/projects/keys.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsRepositoriesJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsRepositoriesJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/repositories.js"
	name := "public/js/controllers/projects/repositories.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsScheduleJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsScheduleJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/schedule.js"
	name := "public/js/controllers/projects/schedule.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsTaskrunnerJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsTaskrunnerJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/taskRunner.js"
	name := "public/js/controllers/projects/taskRunner.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsTemplatesJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsTemplatesJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/templates.js"
	name := "public/js/controllers/projects/templates.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsControllersProjectsUsersJs reads file data from disk. It returns an error on failure.
func publicJsControllersProjectsUsersJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/controllers/projects/users.js"
	name := "public/js/controllers/projects/users.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesHostJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesHostJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/host.js"
	name := "public/js/factories/host.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesHostgroupJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesHostgroupJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/hostgroup.js"
	name := "public/js/factories/hostgroup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesIdentityJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesIdentityJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/identity.js"
	name := "public/js/factories/identity.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesJobJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesJobJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/job.js"
	name := "public/js/factories/job.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesPlaybookJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesPlaybookJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/playbook.js"
	name := "public/js/factories/playbook.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesProjectJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesProjectJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/project.js"
	name := "public/js/factories/project.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesTaskJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesTaskJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/task.js"
	name := "public/js/factories/task.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsFactoriesUserJs reads file data from disk. It returns an error on failure.
func publicJsFactoriesUserJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/factories/user.js"
	name := "public/js/factories/user.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsRoutesAuthJs reads file data from disk. It returns an error on failure.
func publicJsRoutesAuthJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/routes/auth.js"
	name := "public/js/routes/auth.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsRoutesProjectJs reads file data from disk. It returns an error on failure.
func publicJsRoutesProjectJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/routes/project.js"
	name := "public/js/routes/project.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsRoutesRouterJs reads file data from disk. It returns an error on failure.
func publicJsRoutesRouterJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/routes/router.js"
	name := "public/js/routes/router.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesHostgroupsJs reads file data from disk. It returns an error on failure.
func publicJsServicesHostgroupsJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/hostgroups.js"
	name := "public/js/services/hostgroups.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesIdentitiesJs reads file data from disk. It returns an error on failure.
func publicJsServicesIdentitiesJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/identities.js"
	name := "public/js/services/identities.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesJobsJs reads file data from disk. It returns an error on failure.
func publicJsServicesJobsJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/jobs.js"
	name := "public/js/services/jobs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesPlaybooksJs reads file data from disk. It returns an error on failure.
func publicJsServicesPlaybooksJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/playbooks.js"
	name := "public/js/services/playbooks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesTasksJs reads file data from disk. It returns an error on failure.
func publicJsServicesTasksJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/tasks.js"
	name := "public/js/services/tasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesUserJs reads file data from disk. It returns an error on failure.
func publicJsServicesUserJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/user.js"
	name := "public/js/services/user.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsServicesUsersJs reads file data from disk. It returns an error on failure.
func publicJsServicesUsersJs() (*asset, error) {
	path := "/home/white/git/semaphore/public/js/services/users.js"
	name := "public/js/services/users.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/v0.0.0.sql": dbMigrationsV000Sql,
	"db/migrations/v0.1.0.sql": dbMigrationsV010Sql,
	"db/migrations/v1.0.0.sql": dbMigrationsV100Sql,
	"db/migrations/v1.1.0.sql": dbMigrationsV110Sql,
	"db/migrations/v1.2.0.sql": dbMigrationsV120Sql,
	"db/migrations/v1.3.0.sql": dbMigrationsV130Sql,
	"db/migrations/v1.4.0.sql": dbMigrationsV140Sql,
	"db/migrations/v1.5.0.sql": dbMigrationsV150Sql,
	"db/migrations/v1.6.0.sql": dbMigrationsV160Sql,
	"db/migrations/v1.7.0.sql": dbMigrationsV170Sql,
	"db/migrations/v1.8.0.sql": dbMigrationsV180Sql,
	"db/migrations/v1.9.0.sql": dbMigrationsV190Sql,
	"db/migrations/v2.2.1.sql": dbMigrationsV221Sql,
	"db/migrations/v2.3.0.sql": dbMigrationsV230Sql,
	"db/migrations/v2.3.1.sql": dbMigrationsV231Sql,
	"db/migrations/v2.3.2.sql": dbMigrationsV232Sql,
	"db/migrations/v2.4.0.sql": dbMigrationsV240Sql,
	"db/migrations/v2.5.0.sql": dbMigrationsV250Sql,
	"public/css/.gitignore": publicCssGitignore,
	"public/css/login.less": publicCssLoginLess,
	"public/css/octocat.less": publicCssOctocatLess,
	"public/css/semaphore.less": publicCssSemaphoreLess,
	"public/html/.gitignore": publicHtmlGitignore,
	"public/html/abstract.pug": publicHtmlAbstractPug,
	"public/html/admin.pug": publicHtmlAdminPug,
	"public/html/dashboard.pug": publicHtmlDashboardPug,
	"public/html/index.pug": publicHtmlIndexPug,
	"public/html/tasks.pug": publicHtmlTasksPug,
	"public/html/auth/login.pug": publicHtmlAuthLoginPug,
	"public/html/auth/logout.pug": publicHtmlAuthLogoutPug,
	"public/html/projects/add.pug": publicHtmlProjectsAddPug,
	"public/html/projects/container.pug": publicHtmlProjectsContainerPug,
	"public/html/projects/createTaskModal.pug": publicHtmlProjectsCreatetaskmodalPug,
	"public/html/projects/dashboard.pug": publicHtmlProjectsDashboardPug,
	"public/html/projects/edit.pug": publicHtmlProjectsEditPug,
	"public/html/projects/schedule.pug": publicHtmlProjectsSchedulePug,
	"public/html/projects/taskModal.pug": publicHtmlProjectsTaskmodalPug,
	"public/html/projects/environment/add.pug": publicHtmlProjectsEnvironmentAddPug,
	"public/html/projects/environment/list.pug": publicHtmlProjectsEnvironmentListPug,
	"public/html/projects/inventory/add.pug": publicHtmlProjectsInventoryAddPug,
	"public/html/projects/inventory/edit.pug": publicHtmlProjectsInventoryEditPug,
	"public/html/projects/inventory/list.pug": publicHtmlProjectsInventoryListPug,
	"public/html/projects/keys/add.pug": publicHtmlProjectsKeysAddPug,
	"public/html/projects/keys/list.pug": publicHtmlProjectsKeysListPug,
	"public/html/projects/repositories/add.pug": publicHtmlProjectsRepositoriesAddPug,
	"public/html/projects/repositories/list.pug": publicHtmlProjectsRepositoriesListPug,
	"public/html/projects/templates/add.pug": publicHtmlProjectsTemplatesAddPug,
	"public/html/projects/templates/list.pug": publicHtmlProjectsTemplatesListPug,
	"public/html/projects/users/add.pug": publicHtmlProjectsUsersAddPug,
	"public/html/projects/users/list.pug": publicHtmlProjectsUsersListPug,
	"public/html/users/add.pug": publicHtmlUsersAddPug,
	"public/html/users/list.pug": publicHtmlUsersListPug,
	"public/html/users/user.pug": publicHtmlUsersUserPug,
	"public/img/icon.png": publicImgIconPng,
	"public/img/logo.png": publicImgLogoPng,
	"public/img/screenshot.png": publicImgScreenshotPng,
	"public/js/app.js": publicJsAppJs,
	"public/js/controllers/admin.js": publicJsControllersAdminJs,
	"public/js/controllers/dashboard.js": publicJsControllersDashboardJs,
	"public/js/controllers/login.js": publicJsControllersLoginJs,
	"public/js/controllers/tasks.js": publicJsControllersTasksJs,
	"public/js/controllers/user.js": publicJsControllersUserJs,
	"public/js/controllers/users.js": publicJsControllersUsersJs,
	"public/js/controllers/projects/dashboard.js": publicJsControllersProjectsDashboardJs,
	"public/js/controllers/projects/edit.js": publicJsControllersProjectsEditJs,
	"public/js/controllers/projects/environment.js": publicJsControllersProjectsEnvironmentJs,
	"public/js/controllers/projects/inventory.js": publicJsControllersProjectsInventoryJs,
	"public/js/controllers/projects/keys.js": publicJsControllersProjectsKeysJs,
	"public/js/controllers/projects/repositories.js": publicJsControllersProjectsRepositoriesJs,
	"public/js/controllers/projects/schedule.js": publicJsControllersProjectsScheduleJs,
	"public/js/controllers/projects/taskRunner.js": publicJsControllersProjectsTaskrunnerJs,
	"public/js/controllers/projects/templates.js": publicJsControllersProjectsTemplatesJs,
	"public/js/controllers/projects/users.js": publicJsControllersProjectsUsersJs,
	"public/js/factories/host.js": publicJsFactoriesHostJs,
	"public/js/factories/hostgroup.js": publicJsFactoriesHostgroupJs,
	"public/js/factories/identity.js": publicJsFactoriesIdentityJs,
	"public/js/factories/job.js": publicJsFactoriesJobJs,
	"public/js/factories/playbook.js": publicJsFactoriesPlaybookJs,
	"public/js/factories/project.js": publicJsFactoriesProjectJs,
	"public/js/factories/task.js": publicJsFactoriesTaskJs,
	"public/js/factories/user.js": publicJsFactoriesUserJs,
	"public/js/routes/auth.js": publicJsRoutesAuthJs,
	"public/js/routes/project.js": publicJsRoutesProjectJs,
	"public/js/routes/router.js": publicJsRoutesRouterJs,
	"public/js/services/hostgroups.js": publicJsServicesHostgroupsJs,
	"public/js/services/identities.js": publicJsServicesIdentitiesJs,
	"public/js/services/jobs.js": publicJsServicesJobsJs,
	"public/js/services/playbooks.js": publicJsServicesPlaybooksJs,
	"public/js/services/tasks.js": publicJsServicesTasksJs,
	"public/js/services/user.js": publicJsServicesUserJs,
	"public/js/services/users.js": publicJsServicesUsersJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"v0.0.0.sql": &bintree{dbMigrationsV000Sql, map[string]*bintree{}},
			"v0.1.0.sql": &bintree{dbMigrationsV010Sql, map[string]*bintree{}},
			"v1.0.0.sql": &bintree{dbMigrationsV100Sql, map[string]*bintree{}},
			"v1.1.0.sql": &bintree{dbMigrationsV110Sql, map[string]*bintree{}},
			"v1.2.0.sql": &bintree{dbMigrationsV120Sql, map[string]*bintree{}},
			"v1.3.0.sql": &bintree{dbMigrationsV130Sql, map[string]*bintree{}},
			"v1.4.0.sql": &bintree{dbMigrationsV140Sql, map[string]*bintree{}},
			"v1.5.0.sql": &bintree{dbMigrationsV150Sql, map[string]*bintree{}},
			"v1.6.0.sql": &bintree{dbMigrationsV160Sql, map[string]*bintree{}},
			"v1.7.0.sql": &bintree{dbMigrationsV170Sql, map[string]*bintree{}},
			"v1.8.0.sql": &bintree{dbMigrationsV180Sql, map[string]*bintree{}},
			"v1.9.0.sql": &bintree{dbMigrationsV190Sql, map[string]*bintree{}},
			"v2.2.1.sql": &bintree{dbMigrationsV221Sql, map[string]*bintree{}},
			"v2.3.0.sql": &bintree{dbMigrationsV230Sql, map[string]*bintree{}},
			"v2.3.1.sql": &bintree{dbMigrationsV231Sql, map[string]*bintree{}},
			"v2.3.2.sql": &bintree{dbMigrationsV232Sql, map[string]*bintree{}},
			"v2.4.0.sql": &bintree{dbMigrationsV240Sql, map[string]*bintree{}},
			"v2.5.0.sql": &bintree{dbMigrationsV250Sql, map[string]*bintree{}},
		}},
	}},
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{publicCssGitignore, map[string]*bintree{}},
			"login.less": &bintree{publicCssLoginLess, map[string]*bintree{}},
			"octocat.less": &bintree{publicCssOctocatLess, map[string]*bintree{}},
			"semaphore.less": &bintree{publicCssSemaphoreLess, map[string]*bintree{}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{publicHtmlGitignore, map[string]*bintree{}},
			"abstract.pug": &bintree{publicHtmlAbstractPug, map[string]*bintree{}},
			"admin.pug": &bintree{publicHtmlAdminPug, map[string]*bintree{}},
			"auth": &bintree{nil, map[string]*bintree{
				"login.pug": &bintree{publicHtmlAuthLoginPug, map[string]*bintree{}},
				"logout.pug": &bintree{publicHtmlAuthLogoutPug, map[string]*bintree{}},
			}},
			"dashboard.pug": &bintree{publicHtmlDashboardPug, map[string]*bintree{}},
			"index.pug": &bintree{publicHtmlIndexPug, map[string]*bintree{}},
			"projects": &bintree{nil, map[string]*bintree{
				"add.pug": &bintree{publicHtmlProjectsAddPug, map[string]*bintree{}},
				"container.pug": &bintree{publicHtmlProjectsContainerPug, map[string]*bintree{}},
				"createTaskModal.pug": &bintree{publicHtmlProjectsCreatetaskmodalPug, map[string]*bintree{}},
				"dashboard.pug": &bintree{publicHtmlProjectsDashboardPug, map[string]*bintree{}},
				"edit.pug": &bintree{publicHtmlProjectsEditPug, map[string]*bintree{}},
				"environment": &bintree{nil, map[string]*bintree{
					"add.pug": &bintree{publicHtmlProjectsEnvironmentAddPug, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsEnvironmentListPug, map[string]*bintree{}},
				}},
				"inventory": &bintree{nil, map[string]*bintree{
					"add.pug": &bintree{publicHtmlProjectsInventoryAddPug, map[string]*bintree{}},
					"edit.pug": &bintree{publicHtmlProjectsInventoryEditPug, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsInventoryListPug, map[string]*bintree{}},
				}},
				"keys": &bintree{nil, map[string]*bintree{
					"add.pug": &bintree{publicHtmlProjectsKeysAddPug, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsKeysListPug, map[string]*bintree{}},
				}},
				"repositories": &bintree{nil, map[string]*bintree{
					"add.pug": &bintree{publicHtmlProjectsRepositoriesAddPug, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsRepositoriesListPug, map[string]*bintree{}},
				}},
				"schedule.pug": &bintree{publicHtmlProjectsSchedulePug, map[string]*bintree{}},
				"taskModal.pug": &bintree{publicHtmlProjectsTaskmodalPug, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"add.pug": &bintree{publicHtmlProjectsTemplatesAddPug, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsTemplatesListPug, map[string]*bintree{}},
				}},
				"users": &bintree{nil, map[string]*bintree{
					"add.pug": &bintree{publicHtmlProjectsUsersAddPug, map[string]*bintree{}},
					"list.pug": &bintree{publicHtmlProjectsUsersListPug, map[string]*bintree{}},
				}},
			}},
			"tasks.pug": &bintree{publicHtmlTasksPug, map[string]*bintree{}},
			"users": &bintree{nil, map[string]*bintree{
				"add.pug": &bintree{publicHtmlUsersAddPug, map[string]*bintree{}},
				"list.pug": &bintree{publicHtmlUsersListPug, map[string]*bintree{}},
				"user.pug": &bintree{publicHtmlUsersUserPug, map[string]*bintree{}},
			}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"icon.png": &bintree{publicImgIconPng, map[string]*bintree{}},
			"logo.png": &bintree{publicImgLogoPng, map[string]*bintree{}},
			"screenshot.png": &bintree{publicImgScreenshotPng, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{publicJsAppJs, map[string]*bintree{}},
			"controllers": &bintree{nil, map[string]*bintree{
				"admin.js": &bintree{publicJsControllersAdminJs, map[string]*bintree{}},
				"dashboard.js": &bintree{publicJsControllersDashboardJs, map[string]*bintree{}},
				"login.js": &bintree{publicJsControllersLoginJs, map[string]*bintree{}},
				"projects": &bintree{nil, map[string]*bintree{
					"dashboard.js": &bintree{publicJsControllersProjectsDashboardJs, map[string]*bintree{}},
					"edit.js": &bintree{publicJsControllersProjectsEditJs, map[string]*bintree{}},
					"environment.js": &bintree{publicJsControllersProjectsEnvironmentJs, map[string]*bintree{}},
					"inventory.js": &bintree{publicJsControllersProjectsInventoryJs, map[string]*bintree{}},
					"keys.js": &bintree{publicJsControllersProjectsKeysJs, map[string]*bintree{}},
					"repositories.js": &bintree{publicJsControllersProjectsRepositoriesJs, map[string]*bintree{}},
					"schedule.js": &bintree{publicJsControllersProjectsScheduleJs, map[string]*bintree{}},
					"taskRunner.js": &bintree{publicJsControllersProjectsTaskrunnerJs, map[string]*bintree{}},
					"templates.js": &bintree{publicJsControllersProjectsTemplatesJs, map[string]*bintree{}},
					"users.js": &bintree{publicJsControllersProjectsUsersJs, map[string]*bintree{}},
				}},
				"tasks.js": &bintree{publicJsControllersTasksJs, map[string]*bintree{}},
				"user.js": &bintree{publicJsControllersUserJs, map[string]*bintree{}},
				"users.js": &bintree{publicJsControllersUsersJs, map[string]*bintree{}},
			}},
			"factories": &bintree{nil, map[string]*bintree{
				"host.js": &bintree{publicJsFactoriesHostJs, map[string]*bintree{}},
				"hostgroup.js": &bintree{publicJsFactoriesHostgroupJs, map[string]*bintree{}},
				"identity.js": &bintree{publicJsFactoriesIdentityJs, map[string]*bintree{}},
				"job.js": &bintree{publicJsFactoriesJobJs, map[string]*bintree{}},
				"playbook.js": &bintree{publicJsFactoriesPlaybookJs, map[string]*bintree{}},
				"project.js": &bintree{publicJsFactoriesProjectJs, map[string]*bintree{}},
				"task.js": &bintree{publicJsFactoriesTaskJs, map[string]*bintree{}},
				"user.js": &bintree{publicJsFactoriesUserJs, map[string]*bintree{}},
			}},
			"routes": &bintree{nil, map[string]*bintree{
				"auth.js": &bintree{publicJsRoutesAuthJs, map[string]*bintree{}},
				"project.js": &bintree{publicJsRoutesProjectJs, map[string]*bintree{}},
				"router.js": &bintree{publicJsRoutesRouterJs, map[string]*bintree{}},
			}},
			"services": &bintree{nil, map[string]*bintree{
				"hostgroups.js": &bintree{publicJsServicesHostgroupsJs, map[string]*bintree{}},
				"identities.js": &bintree{publicJsServicesIdentitiesJs, map[string]*bintree{}},
				"jobs.js": &bintree{publicJsServicesJobsJs, map[string]*bintree{}},
				"playbooks.js": &bintree{publicJsServicesPlaybooksJs, map[string]*bintree{}},
				"tasks.js": &bintree{publicJsServicesTasksJs, map[string]*bintree{}},
				"user.js": &bintree{publicJsServicesUserJs, map[string]*bintree{}},
				"users.js": &bintree{publicJsServicesUsersJs, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

